services:
  db:
    container_name: db_postgres
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: always
    networks:
      - prod-net

  backend:
    container_name: backend
    build:
      context: backend/
      dockerfile: Dockerfile
    ports:
      - "8000:80"
    depends_on:
      - db
    environment:
      ELASTIC_USERNAME: "${ELASTIC_USERNAME}"
      ELASTIC_PASSWORD: "${ELASTIC_PASSWORD}"
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}"
    volumes:
      - ./backend:/var/www
    networks:
      - prod-net

  php-fpm:
    container_name: php-fpm
    build:
      context: backend/
      dockerfile: php/Dockerfile
    volumes:
      - ./backend:/var/www/html:rw
    networks:
      - prod-net

  backend-nginx:
    container_name: backend-nginx
    build: ./backend/nginx
    ports:
      - "8080:80"
    volumes:
      - ./backend/public:/var/www/public:ro
    depends_on:
      - php-fpm
    networks:
      - prod-net

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
     - './frontend:/app'
     - 'node_modules:/app/node_modules'
    ports:
      - "3000:3000"
    networks:
      - prod-net

  frontend-nginx:
    container_name: frontend-nginx
    build:
      context:  frontend/
      dockerfile: nginx/Dockerfile
    ports:
      - "8081:80"
    depends_on:
      - frontend
      - backend
    networks:
      - prod-net

volumes:
  postgres-data:
  node_modules:

networks:
  prod-net: